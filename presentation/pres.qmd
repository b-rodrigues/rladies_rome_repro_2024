---
title: "rix: environnements de développement reproductibles pour développeurs R"
author: "Bruno Rodrigues"
format:
  revealjs:
    embed-resources: true
    slide-number: true
    theme: solarized
    incremental: true
execute:
  echo: true
---

## Qui suis-je?

- Bruno Rodrigues, responsable des départements "statistiques" et "stratégie de données" du Ministère 
  de la Recherche et de l’Enseignement supérieur au Luxembourg

- Utilisateur de R depuis 2009

- Cette présentation est disponible sur le lien suivant [https://is.gd/nix_rr_2024](https://is.gd/nix_rr_2024)

- Code source disponible ici: [https://github.com/b-rodrigues/rr_2024/blob/main/presentation/pres_rr_2024.qmd](https://github.com/b-rodrigues/rr_2024/blob/main/presentation/pres_rr_2024.qmd)

## Nix et les problèmes qu'il résout

- Nix: un gestionnaire de paquets dispo pour Linux, Windows (via WSL2) et macOS
- Permet de construire des environnements de développements reproductibles
- Autrement dit, adieu...
- ... la collaboration sur environnements hétérogènes
- ... les projets pas reproductibles
- ... pas pouvoir déployer le même environnement "partout"

## La solution "classique"

- Docker + `{renv}` (ou autre tant qu'on arrive à installer...)
- ... les mêmes paquets R
- ... la même version de R
- ... les mêmes dépendances "système" (`gdal` pour `{terra}` par exemple)

## Le gestionnaire de paquets Nix (1/3)

- Pas une alternative à Docker!
- Mais permet de résoudre les mêmes problèmes
- La promesse de Nix:

. . .

*Installe tous les logiciels nécessaires (R, paquets R, librairies de développement,
etc) de manière totalement reproductible et sur n'importe quelle plate-forme en écrivant
une seule expression dans le langage Nix.*

## Le gestionnaire de paquets Nix (2/3)

- Avec Nix, on configure une fois et on exécute partout!
- Partout: ordinateur ou serveur: Windows (via WSL2), Linux (même Android) ou macOS
- Pour R: 99% des paquets CRAN + Bioconductor disponibles
- Aussi possible d'installer des paquets Git-hub/lab
- Installe les dépendances Z d'un paquet X, les dépendances Y de Z, et ainsi de suite...

## Le gestionnaire de paquets Nix (3/3)

- Nix: gestionnaire de paquets *fonctionnel* (inspiré du lambda-calcul)

. . .

![Attention aux effets de bord!](img/procedural_vs_fonctional.png)

## Un gestionnaire de paquets fonctionnel et déclaratif

Nix utilise des expressions écrite dans le langage Nix pour installer des paquets:

```
let
  pkgs = import (fetchTarball "https://github.com/NixOS/nixpkgs/archive/976fa3369d722e76f37c77493d99829540d43845.tar.gz") {};
  system_packages = builtins.attrValues {
    inherit (pkgs) R ;
  };
in
  pkgs.mkShell {
    buildInputs = [ system_packages ];
    shellHook = "R --vanilla";
  }
```

## rix: usage de base (1/2)

- `{rix}` ([site](https://b-rodrigues.github.io/rix/index.html)) génère des expressions Nix!
- Il suffit d'utiliser la fonction `rix()`:

. . .

```{r, eval = FALSE}
library(rix)

rix(r_ver = "4.3.1",
    r_pkgs = c("dplyr", "ggplot2"),
    system_pkgs = NULL,
    git_pkgs = NULL,
    tex_pkgs = NULL,
    ide = "rstudio",
    project_path = ".")
```

- Génère `default.nix` avec l'expression Nix qu'il faut!

## rix: usage de base (2/2)

- Build: `nix-build`
- Run: `nix-shell`

## rix: usage de base (2/2)

{{< video https://youtu.be/oKmFNQ-AzeQ width="850" height="540" >}}

## rix et targets

{{< video https://youtu.be/GMDWZqzvl9c width="850" height="540" >}}

## rix et targets

- Aussi possible d'exécuter les pipelines sur Github Actions!
- `rix::tar_nix_ga()` génère le fichier yaml qu'il faut
- On commit et pousse et c'est parti!

## rix et targets

{{< video https://youtu.be/gQ7NN_ZIcY0 width="850" height="540" >}}


## rix et les subshells

- Possible d'exécuter du code dans un "sous-environnement"
- On peut récupérer le résultat dans la session principale!

## rix et les subshells

{{< video https://youtu.be/bz-A-uS-cIw  width="850" height="540" >}}

## Pour en apprendre plus

- Documentation officielle de Nix: [https://nix.dev/](https://nix.dev/)

- Nix pills: [https://nixos.org/guides/nix-pills/00-preface](https://nixos.org/guides/nix-pills/00-preface)

- Tuto Nix par l'INRIA: [https://nix-tutorial.gitlabpages.inria.fr/nix-tutorial/](https://nix-tutorial.gitlabpages.inria.fr/nix-tutorial/)

- rix: [https://b-rodrigues.github.io/rix/](https://b-rodrigues.github.io/rix/)

- Mon blog: [https://www.brodrigues.co/tags/nix/](https://www.brodrigues.co/tags/nix/)

- Mon livre (ne parle pas de Nix, mais de reproductibilité avec Docker et renv): [https://raps-with-r.dev/](https://raps-with-r.dev/)
