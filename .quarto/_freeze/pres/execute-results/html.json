{
  "hash": "d3b43cb7e5490be709e4e2b7e72a610f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Building Reproducible Analytical Pipelines with R, Docker and Nix\"\nauthor: \"Bruno Rodrigues\"\nformat:\n  revealjs:\n    embed-resources: true\n    slide-number: true\n    theme: solarized\n    incremental: true\nexecute:\n  echo: true\n---\n\n\n\n## Intro: Who am I\n\nBruno Rodrigues, head of the statistics and data strategy departments at the Ministry of Research and Higher education in Luxembourg\n\nSlides available online at https://is.gd/raps_rladies_rome_2024\n\nCode available at: https://github.com/b-rodrigues/rladies_rome_repro_2024\n\n## Goal of this workshop\n\n-   Identify *what* must be managed for reproducibility\n-   Learn the following tools to turn your projects reproducible\n    1.  {renv}\n    2.  Docker\n\t3.  Nix\n-   What we will *not* learn (but is very useful!):\n    1.  Functional programming concepts\n    2.  Git and Github\n    3.  Documenting, testing and packaging code\n\t4.  {targets}\n\n## Main reference for this workshop\n\n- This workshop is a two hours, very surface-level, summary of my latest book [Building reproducible analytical pipelines with R](https://raps-with-r.dev/)\n- You can read it for free [here](https://raps-with-r.dev/)\n- Nix is not covered in the book, but you can learn more by visiting [this link](https://b-rodrigues.github.io/rix/)\n\n## What I mean by *reproducibility*\n\n-   Ability to recover *exactly* the same results from an analysis\n-   Why would you want that?\n-   Auditing purposes\n-   Update of data (only impact must be from data update)\n-   Reproducibility as a cornerstone of science\n-   (Work on an immutable dev environment)\n-   \"But if I have the original script and data, what's the problem?\"\n\n## Reproducibility is on a continuum (1/2)\n\nHere are the 4 main things influencing an analysis' reproducibility:\n\n-   Version of R used\n-   Versions of packages used\n-   Operating system\n-   Hardware\n\n## Reproducibility is on a continuum (2/2)\n\n![](images/repro_spectrum.png){fig-align=\"center\"}\n\nSource: Peng, Roger D. 2011. \"Reproducible Research in Computational Science.\" Science 334 (6060): 1226--27\n\n## Risks to mitigate: R versions\n\nR \\< 3.6 (`set.seed(1234)`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(seq(1, 10), 5)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 6 5 8 9\n```\n\n\n:::\n:::\n\n\n\nR \\>= 3.6 (`set.seed(1234)`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(seq(1, 10), 5)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10  6  5  4  1\n```\n\n\n:::\n:::\n\n\n\nReal impact on papers published with R \\< 3.6! (ongoing research project)\n\n## Risks to mitigate: package versions\n\n`{stringr}` < 1.5.0:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstringr::str_subset(c(\"\", \"a\"), \"\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n[1] \"a\"\n```\n:::\n\n\n\n. . .\n\n`{stringr}` >= 1.5.0:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstringr::str_subset(c(\"\", \"a\"), \"\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nError in `stringr::str_subset()`:\n! `pattern` can't be the empty string (`\"\"`).\nRun `rlang::last_trace()` to see where the error occurred.\n```\n:::\n\n\n\n. . .\n\n(Actually a good change, but if you rely on that old behaviour for your script...)\n\n## Risks to mitigate: operating systems (1/3)\n\nRarely an issue, but [Neupane, et al. 2019](https://pubs.acs.org/doi/10.1021/acs.orglett.9b03216):\n\n> While preparing a manuscript, to our surprise, attempts by team members to replicate these results produced different calculated NMR chemical shifts despite using the same Gaussian files and the same procedure outlined by Willoughby et al. \\[...\\] these conclusions were based on chemical shifts that appeared to depend on the computer system on which step 15 of that protocol was performed.\n\n## Risks to mitigate: operating systems (2/3)\n\n![](images/table2a.png){fig-align=\"center\"}\n\n## Risks to mitigate: operating systems (3/3)\n\n![](images/table2.png){fig-align=\"center\"}\n\n## The problem\n\n<span style=\"font-variant:small-caps;text-align:center;\">Works on my machine!</span>\n\n. . .\n\nWe’ll ship your computer then.\n\n## Project start\n\n- Our project: housing in Luxembourg\n- Data to analyse: `vente-maison-2010-2021.xlsx` in the `data` folder\n- 2 scripts to analyse data (in the `scripts/project_start` folder):\n  1. One to scrape the Excel file [save_data.R](https://raw.githubusercontent.com/b-rodrigues/rap4all/master/scripts/save_data.R)\n  2. One to analyse the data  [analysis.R](https://raw.githubusercontent.com/b-rodrigues/rap4all/master/scripts/analysis.R)\n\n## Project start - What's wrong with these scripts?\n\n- The first two scripts -> script-based workflow\n- Just a long series of calls\n- No functions\n  * difficult to re-use!\n  * difficult to test!\n  * difficult to parallelise!\n  * lots of repetition (plots)\n- Usually we want a report not just a script\n- No record of package, nor R, versions used\n\n## Turning our scripts reproducible\n\nWe need to answer these questions\n\n. . .\n\n1. How easy would it be for someone else to rerun the analysis?\n2. How easy would it be to update the project?\n3. How easy would it be to reuse this code for another project?\n4. What guarantee do we have that the output is stable through time?\n\n## The easiest, *cheapest* thing you should do\n\n- Generate a list of used packages and R using `{renv}`\n\n## Recording packages and R version used\n\nCreate a `renv.lock` file in 2 steps!\n\n- Open an R session in the folder containing the scripts\n- Run `renv::init()` and check the folder for `renv.lock`\n\n. . .\n\n(`renv::init()` will take some time to run the first time)\n\n## `renv.lock` file\n\n- Open the `renv.lock` file\n\n. . .\n\n```\n{\n\"R\": {\n  \"Version\": \"4.2.2\",\n  \"Repositories\": [\n  {\n   \"Name\": \"CRAN\",\n   \"URL\": \"https://packagemanager.rstudio.com/all/latest\"\n  }\n  ]\n},\n\"Packages\": {\n  \"MASS\": {\n    \"Package\": \"MASS\",\n    \"Version\": \"7.3-58.1\",\n    \"Source\": \"Repository\",\n    \"Repository\": \"CRAN\",\n    \"Hash\": \"762e1804143a332333c054759f89a706\",\n    \"Requirements\": []\n  },\n  \"Matrix\": {\n    \"Package\": \"Matrix\",\n    \"Version\": \"1.5-1\",\n    \"Source\": \"Repository\",\n    \"Repository\": \"CRAN\",\n    \"Hash\": \"539dc0c0c05636812f1080f473d2c177\",\n    \"Requirements\": [\n      \"lattice\"\n    ]\n\n    ***and many more packages***\n```\n\n## Restoring a library using an `renv.lock` file\n\n- `renv.lock` file not just a record\n- Can be used to restore as well!\n- Go to `scripts/renv_restore`\n- Run `renv::restore()` (answer `Y` to active the project when asked)\n- Will take some time to run (so maybe don’t do it now)... and it might not work!\n\n## `{renv}` conclusion\n\nShortcomings:\n\n. . .\n\n1. Records, but does not restore the version of R\n2. Installation of old packages can fail (due to missing OS-dependencies)\n\n. . .\n\nbut... :\n\n. . .\n\n1. Generating a `renv.lock` file is \"free\"\n2. Provides a blueprint for dockerizing our pipeline\n3. Creates a project-specific library (no interferences)\n\n## Where are we in the continuum?\n\n- Package and R versions are recorded\n- Packages can be restored (but not always!)\n- But where’s the pipeline?\n\n## Ensuring long-term reproducibility using Docker\n\nRemember the problem: *works on my machine*?\n\n. . .\n\nTurns out we **will** ship the whole computer to solve the issue using Docker.\n\n## What is Docker\n\n- Docker is a containerisation tool that you install on your computer\n- Docker allows you to build *images* and run *containers* (a container is an instance of an image)\n- Docker images:\n    1. contain all the software and code needed for your project\n    2. are immutable (cannot be changed at run-time)\n    3. can be shared on- and offline\n\n## A word of warning\n\n- Docker works best on Linux and macOS\n- Possible to run on Windows, but need to enable options in the BIOS and WSL2\n- This intro will be as gentle as possible\n\n## \"Hello, Docker!\"\n\n- Start by creating a Dockerfile (see `scripts/Docker/hello_docker/Dockerfile`)\n- Dockerfile = recipe for an image\n- Build the image: `docker build -t hello .`\n- Run a container: `docker run --rm --name hello_container hello`\n- `--rm`: remove the container after running\n- `--name some_name`: name your container `some_name`\n\n## Without Docker\n\n![](images/without_docker.png){fig-align=\"center\"}\n\n## With Docker\n\n![](images/with_docker.png){fig-align=\"center\"}\n\n## Dockerizing a project (1/2)\n\n- At image build-time:\n  1. install R (or use an image that ships R)\n  2. install packages (using our `renv.lock` file)\n  3. copy all scripts to the image\n  4. run the analysis using `targets::tar_make()`\n\n- At container run-time:\n  1. copy the outputs of the analysis from the container to your computer\n\n## Dockerizing a project (2/2)\n\n- The built image can be shared, or only the Dockerfile (and users can then rebuild the image)\n- The outputs will always stay the same!\n\n## Build-time vs run-time\n\n- Important to understand the distinction\n- Build-time:\n  1. builds the image: software, packages and dependencies get installed using `RUN` statements\n  2. must ensure that correct versions get installed (no difference between building today and in 2 years)\n- Run-time:\n  1. The last command, `CMD`, gets executed\n\n## The Rocker project\n\n- Possible to build new images from other images\n- The Rocker project provides many images with R, RStudio, Shiny, and other packages pre-installed\n- We will use the Rocker images [\"r-ver\"](https://rocker-project.org/images/versioned/r-ver.html), specifically made for reproducibility\n\n## Docker Hub\n\n- Images get automatically downloaded from Docker Hub\n- You can build an image and share it on Docker Hub (see [here](https://hub.docker.com/repository/docker/brodriguesco/ess_dev_env/general) for an example)\n- It's also possible to share images on another image registry, or without one at all\n\n## An example of a Dockerized project\n\nLook at the Dockerfile [here](https://github.com/rap4all/housing/tree/docker).\n\n- In your opinion, what does the first line do?\n- In your opinion, what are the lines 3 to 24 doing? See 'system prerequisites' [here](https://packagemanager.posit.co/client/#/repos/2/packages/tidyr)\n- What do all the lines starting with `RUN` do?\n- What do all the lines starting with `COPY` do?\n- What does the very last line do?\n\n## Dockerizing our project (1/2)\n\n- The project is dockerized in `scripts/Docker/dockerized_project`\n- There's:\n\n. . .\n\n1. A Dockerfile\n2. A `renv.lock` file\n3. A `_targets.R` (didn’t discuss it here)\n4. The source to our analysis `analyse_data.Rmd`\n5. Required functions in the `functions/` folder\n\n. . .\n\nBuild the image `docker build -t housing_image .`\n\n## Dockerizing our project (2/2)\n\n6. Run a container:\n   1. First, create a shared folder on your computer\n   2. Then, use this command, but change `/path/to/shared_folder` to the one you made: `docker run --rm --name housing_container -v /path/to/shared_folder:/home/housing/shared_folder:rw housing_image`\n7. Check the shared folder on your computer: the output is now there!\n\n\n## Docker: a panacea?\n\n- Docker is very useful and widely used\n- But the entry cost is high\n- And it's a single point of failure (what happens if Docker gets bought, abandoned, etc?)\n- There are alternatives (Podman, or without containerization: Nix)\n\n## The Nix package manager\n\nPackage manager: tool to install and manage *packages*\n\nPackage: any piece of software (not just R packages)\n\nA popular package manager:\n\n## The Nix package manager\n\n![Google Play Store](img/play_store.png)\n\n## Reproducibility in the R ecosystem\n\n- Per-project environments not often used\n- Popular choice: `{renv}`, but deals with R packages only\n- Still need to take care of R itself\n- System-level dependencies as well!\n\n. . .\n\nA popular approach: Docker + `{renv}` (see [Rocker project](https://rocker-project.org/))\n\n. . .\n\nNix deals with everything, with one single text file (called a Nix expression)!\n\n## A basic Nix expression (1/6)\n\n```\nlet\n  pkgs = import (fetchTarball \"https://github.com/NixOS/nixpkgs/archive/976fa3369d722e76f37c77493d99829540d43845.tar.gz\") {};\n  system_packages = builtins.attrValues {\n    inherit (pkgs) R ;\n  };\nin\n  pkgs.mkShell {\n    buildInputs = [ system_packages ];\n    shellHook = \"R --vanilla\";\n  }\n```\n\nThere's a lot to discuss here!\n\n## A basic Nix expression (2/6)\n\n- Written in the Nix language (not discussed)\n- Defines the repository to use (with a fixed revision)\n- Lists packages to install\n- Defines the output: a development shell\n\n## A basic Nix expression (3/6)\n\n- Software for Nix is defined as a mono-repository of tens of thousands of expressions on Github\n- Github: we can use any commit to pin package versions for reproducibility!\n- For example, the following commit installs R 4.3.1 and associated packages:\n\n. . .\n\n```\npkgs = import (fetchTarball \"https://github.com/NixOS/nixpkgs/archive/976fa3369d722e76f37c77493d99829540d43845.tar.gz\") {};\n```\n\n- Let's take a look at the [repository](https://github.com/NixOS/nixpkgs)...\n\n## A basic Nix expression (4/6)\n\n- `system_packages`: a variable that lists software to install\n- In this case, only R:\n\n. . .\n\n```\nsystem_packages = builtins.attrValues {\n  inherit (pkgs) R ;\n};\n```\n\n## A basic Nix expression (5/6)\n\n- Finally, we define a shell:\n\n. . .\n\n```\npkgs.mkShell {\n  buildInputs = [ system_packages ];\n  shellHook = \"R --vanilla\";\n}\n```\n\n. . .\n\n- This shell will come with the software defined in `system_packages` (`buildInputs`)\n- And launch `R --vanilla` when started (`shellHook`)\n\n## A basic Nix expression (6/6)\n\n- Writing these expressions requires learning a new language\n- While incredibly powerful, if all we want are per-project reproducible dev shells...\n- ...then `{rix}` will help!\n\n## Nix expressions\n\n- Nix expressions can be used to install software\n- But we will use them to build per-project development shells\n- We will include R, LaTeX packages, or Quarto, Python, Julia....\n- Nix takes care of installing every dependency down to the compiler!\n\n## CRAN and Bioconductor\n\n- CRAN is the repository of R packages to extend the language\n- As of writing, +20000 packages available\n- Biocondcutor: repository with a focus on Bioinformatics: +2000 more packages\n- Almost all available through `nixpkgs` in the `rPackages` set!\n- Find packages [here](https://search.nixos.org/packages?channel=23.11&from=0&size=50&sort=relevance&type=packages&query=dplyr)\n\n## rix: reproducible development environments with Nix (1/4)\n\n- `{rix}` ([website](https://b-rodrigues.github.io/rix/index.html)) makes writing Nix expression easy!\n- Simply use the provided `rix()` function:\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rix)\n\nrix(r_ver = \"4.3.1\",\n    r_pkgs = c(\"dplyr\", \"ggplot2\"),\n    system_pkgs = NULL,\n    git_pkgs = NULL,\n    tex_pkgs = NULL,\n    ide = \"rstudio\",\n    # This shellHook is required to run Rstudio on Linux\n    # you can ignore it on other systems\n    shell_hook = \"export QT_XCB_GL_INTEGRATION=none\",\n    project_path = \".\")\n```\n:::\n\n\n\n## rix: reproducible development environments with Nix (2/4)\n\n- List required R version and packages\n- Optionally: more system packages, packages hosted on Github, or LaTeX packages\n- Optionally: an IDE (Rstudio, Radian, VS Code or \"other\")\n- Work interactively in an isolated environment!\n\n## rix: reproducible development environments with Nix (3/4)\n\n- `rix::rix()` generates a `default.nix` file\n- Build expressions using `nix-build` (in terminal) or `rix::nix_build()` from R \n- \"Drop\" into the development environment using `nix-shell`\n- Expressions can be generated even without Nix installed\n\n## rix: reproducible development environments with Nix (4/4)\n\n- Can install specific versions of packages (write `\"dplyr@1.0.0\"`)\n- Can install packages hosted on Github\n- Many vignettes to get you started! [See here](https://b-rodrigues.github.io/rix/articles/)\n\n. . .\n\nLet's check out `expressions/rix_intro/`\n\n## Non-interactive use\n\n- `{rix}` makes it easy to run pipelines in the right environment\n- (Little side note: the best tool to build pipelines in R is `{targets}`)\n- See `expressions/nix_targets_pipeline`\n- Can also run the pipeline like so:\n\n. . .\n\n```\ncd /absolute/path/to/pipeline/ && nix-shell default.nix --run \"Rscript -e 'targets::tar_make()'\"\n```\n\n## Nix and Github Actions: running pipelines\n\n- Possible to easily run a `{targets}` pipeline on Github actions\n- Simply run `rix::tar_nix_ga()` to generate the required files\n- Commit and push, and watch the actions run!\n- See [here](https://github.com/b-rodrigues/nix_targets_pipeline/tree/master).\n\n## Nix and Github Actions: writing papers\n\n- Easy collaboration on papers as well\n- See [here](https://github.com/b-rodrigues/rix_paper/tree/master)\n- Just focus on writing!\n\n## Subshells\n\n- Also possible to evaluate single functions inside a \"subshell\"\n- Works from R installed via Nix or not!\n- Very useful to use hard-to-install packages such as {arrow}\n- See `expressions/subshell`\n\n## R packages release cycle\n\n- CRAN is updated daily, but it’s not reflected in nixpkgs\n- The `rPackages` set gets updated around new R releases (every 3 months or so)\n- What if more recent packages are required?\n- One solution: use our `nixpkgs` fork from our `rstats-on-nix` [organisation](https://github.com/rstats-on-nix/nixpkgs/tree/r-daily)!\n\n## Conclusion\n\n- At the very least, generate an `renv.lock` file\n- Always possible to rebuild a Docker image in the future (either you, or someone else!)\n- Consider using `{targets}`: not only good for reproducibility, but also an amazing tool all around\n- Long-term reproducibility: must use Docker (or some alternative), and maintenance effort is required as well\n\n## The end\n\nContact me if you have questions:\n\n- bruno@brodrigues.co\n- Twitter: @brodriguesco\n- Mastodon: @brodriguesco@fosstodon.org\n- Blog: www.brodrigues.co\n- Book: www.raps-with-r.dev\n\n. . .\n\nThank you!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}